
"""
This file was generated by graphql-schema-generator which is
maintained by prisma-korea.

Do not make changes to this file directly.
Read more about in https://github.com/prisma-korea/graphql-schema-generator.
"""
type Query {
  client(id: ID!): Client
  clients: [Client!]!
  clientlocation(id: ID!): ClientLocation
  clientlocations: [ClientLocation!]!
  workman(id: ID!): Workman
  workmans: [Workman!]!
  workmanlocation(id: ID!): WorkmanLocation
  workmanlocations: [WorkmanLocation!]!
  admin(id: ID!): Admin
  admins: [Admin!]!
  workmanservice(id: ID!): WorkmanService
  workmanservices: [WorkmanService!]!
  service(id: ID!): Service
  services: [Service!]!
  category(id: ID!): Category
  categorys: [Category!]!
  servicecategory(id: ID!): ServiceCategory
  servicecategorys: [ServiceCategory!]!
  work(id: ID!): Work
  works: [Work!]!
  worklocation(id: ID!): WorkLocation
  worklocations: [WorkLocation!]!
}

input ClientCreateInput {
  name: String!
  email: String!
  password: String!
  emailVerified: Boolean
  gender: Gender
  joinedDate: DateTime!
  address: String
  country: String
  phone: String
  phoneVerified: Boolean
  avatar: String
  dob: DateTime
  bio: String
  verified: Boolean
  location: ClientLocation
  work: [Work!]!
}

input ClientUpdateInput {
  name: String
  email: String
  password: String
  emailVerified: Boolean
  gender: Gender
  joinedDate: DateTime
  address: String
  country: String
  phone: String
  phoneVerified: Boolean
  avatar: String
  dob: DateTime
  bio: String
  verified: Boolean
  location: ClientLocation
  work: [Work!]
}

input ClientLocationCreateInput {
  longitude: Float!
  latitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: Client!
}

input ClientLocationUpdateInput {
  longitude: Float
  latitude: Float
  createdAt: DateTime
  updatedAt: DateTime
  client: Client
}

input WorkmanCreateInput {
  name: String!
  email: String!
  password: String!
  emailVerified: Boolean
  gender: Gender
  joinedDate: DateTime!
  address: String
  country: String
  phone: String
  phoneVerified: Boolean
  avatar: String
  dob: DateTime
  bio: String
  verified: Boolean
  location: WorkmanLocation
  services: [WorkmanService!]!
  work: [Work!]!
}

input WorkmanUpdateInput {
  name: String
  email: String
  password: String
  emailVerified: Boolean
  gender: Gender
  joinedDate: DateTime
  address: String
  country: String
  phone: String
  phoneVerified: Boolean
  avatar: String
  dob: DateTime
  bio: String
  verified: Boolean
  location: WorkmanLocation
  services: [WorkmanService!]
  work: [Work!]
}

input WorkmanLocationCreateInput {
  longitude: Float!
  latitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  workman: Workman!
}

input WorkmanLocationUpdateInput {
  longitude: Float
  latitude: Float
  createdAt: DateTime
  updatedAt: DateTime
  workman: Workman
}

input AdminCreateInput {
  name: String!
  email: String!
  password: String!
  joinedDate: DateTime!
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  joinedDate: DateTime
}

input WorkmanServiceCreateInput {
  workman: Workman!
  service: Service!
}

input WorkmanServiceUpdateInput {
  workman: Workman
  service: Service
}

input ServiceCreateInput {
  title: String!
  description: String
  createdAt: DateTime!
  categories: [ServiceCategory!]!
  workmen: [WorkmanService!]!
  work: [Work!]!
}

input ServiceUpdateInput {
  title: String
  description: String
  createdAt: DateTime
  categories: [ServiceCategory!]
  workmen: [WorkmanService!]
  work: [Work!]
}

input CategoryCreateInput {
  title: String!
  description: String
  createdAt: DateTime!
  services: [ServiceCategory!]!
}

input CategoryUpdateInput {
  title: String
  description: String
  createdAt: DateTime
  services: [ServiceCategory!]
}

input ServiceCategoryCreateInput {
  category: Category!
  service: Service!
}

input ServiceCategoryUpdateInput {
  category: Category
  service: Service
}

input WorkCreateInput {
  createdAt: DateTime!
  client: Client!
  workman: Workman!
  service: Service!
  location: WorkLocation
  requestTime: DateTime!
  workStartTime: DateTime
  workEndTime: DateTime
  paymentId: String
}

input WorkUpdateInput {
  createdAt: DateTime
  client: Client
  workman: Workman
  service: Service
  location: WorkLocation
  requestTime: DateTime
  workStartTime: DateTime
  workEndTime: DateTime
  paymentId: String
}

input WorkLocationCreateInput {
  longitude: Float!
  latitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  work: Work!
}

input WorkLocationUpdateInput {
  longitude: Float
  latitude: Float
  createdAt: DateTime
  updatedAt: DateTime
  work: Work
}

type Mutation {
  createClient(client: ClientCreateInput!): Client
  updateClient(client: ClientUpdateInput!): Client
  deleteClient(id: ID!): Client
  createClientLocation(clientlocation: ClientLocationCreateInput!): ClientLocation
  updateClientLocation(clientlocation: ClientLocationUpdateInput!): ClientLocation
  deleteClientLocation(id: ID!): ClientLocation
  createWorkman(workman: WorkmanCreateInput!): Workman
  updateWorkman(workman: WorkmanUpdateInput!): Workman
  deleteWorkman(id: ID!): Workman
  createWorkmanLocation(workmanlocation: WorkmanLocationCreateInput!): WorkmanLocation
  updateWorkmanLocation(workmanlocation: WorkmanLocationUpdateInput!): WorkmanLocation
  deleteWorkmanLocation(id: ID!): WorkmanLocation
  createAdmin(admin: AdminCreateInput!): Admin
  updateAdmin(admin: AdminUpdateInput!): Admin
  deleteAdmin(id: ID!): Admin
  createWorkmanService(workmanservice: WorkmanServiceCreateInput!): WorkmanService
  updateWorkmanService(workmanservice: WorkmanServiceUpdateInput!): WorkmanService
  deleteWorkmanService(id: ID!): WorkmanService
  createService(service: ServiceCreateInput!): Service
  updateService(service: ServiceUpdateInput!): Service
  deleteService(id: ID!): Service
  createCategory(category: CategoryCreateInput!): Category
  updateCategory(category: CategoryUpdateInput!): Category
  deleteCategory(id: ID!): Category
  createServiceCategory(servicecategory: ServiceCategoryCreateInput!): ServiceCategory
  updateServiceCategory(servicecategory: ServiceCategoryUpdateInput!): ServiceCategory
  deleteServiceCategory(id: ID!): ServiceCategory
  createWork(work: WorkCreateInput!): Work
  updateWork(work: WorkUpdateInput!): Work
  deleteWork(id: ID!): Work
  createWorkLocation(worklocation: WorkLocationCreateInput!): WorkLocation
  updateWorkLocation(worklocation: WorkLocationUpdateInput!): WorkLocation
  deleteWorkLocation(id: ID!): WorkLocation
}

scalar DateTime

enum Gender {
  MALE
  FEMALE
}

type Client {
  id: ID!
  name: String!
  email: String!
  password: String!
  emailVerified: Boolean
  gender: Gender
  joinedDate: DateTime!
  address: String
  country: String
  phone: String
  phoneVerified: Boolean
  avatar: String
  dob: DateTime
  bio: String
  verified: Boolean
  location: ClientLocation
  work: [Work!]!
}

type ClientLocation {
  id: ID!
  longitude: Float!
  latitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: Client!
}

type Workman {
  id: ID!
  name: String!
  email: String!
  password: String!
  emailVerified: Boolean
  gender: Gender
  joinedDate: DateTime!
  address: String
  country: String
  phone: String
  phoneVerified: Boolean
  avatar: String
  dob: DateTime
  bio: String
  verified: Boolean
  location: WorkmanLocation
  services: [WorkmanService!]!
  work: [Work!]!
}

type WorkmanLocation {
  id: ID!
  longitude: Float!
  latitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  workman: Workman!
}

type Admin {
  id: ID!
  name: String!
  email: String!
  password: String!
  joinedDate: DateTime!
}

type WorkmanService {
  workman: Workman!
  service: Service!
}

type Service {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  categories: [ServiceCategory!]!
  workmen: [WorkmanService!]!
  work: [Work!]!
}

type Category {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  services: [ServiceCategory!]!
}

type ServiceCategory {
  category: Category!
  service: Service!
}

type Work {
  id: ID!
  createdAt: DateTime!
  client: Client!
  workman: Workman!
  service: Service!
  location: WorkLocation
  requestTime: DateTime!
  workStartTime: DateTime
  workEndTime: DateTime
  paymentId: String
}

type WorkLocation {
  id: ID!
  longitude: Float!
  latitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  work: Work!
}