// Prisma Schema
// Documentation: https://pris.ly/d/prisma-schema

// GENERATORS
generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator graphql {
  provider = "graphql-schema-generator"
  createCRUD = "true"
  output = "./graphql"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "./diagrams/ERD-auto.svg"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator joi {
  provider = "prisma-joi-generator"
  output = "./joi"
}

datasource db {
  provider = "mysql"
  url      = env("DB_CONNECTION_URL")
}

// ENUMS
enum Gender {
  MALE
  FEMALE
}

// MODELS
model Client {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  emailVerified Boolean? @default(false)
  gender        Gender?
  joinedDate    DateTime @default(now())
  address       String?
  country       String?
  phone         String?
  phoneVerified Boolean? @default(false)
  avatar        String?
  dob           DateTime?
  bio           String?
  verified      Boolean? @default(false)
  location      ClientLocation?
  work          Work[]
}

model ClientLocation {
  id        String    @id @default(uuid())
  longitude Float
  latitude  Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clientId  String    @unique
  client    Client    @relation(fields: [clientId], references: [id])
}

model Worker {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  emailVerified Boolean? @default(false)
  gender        Gender?
  joinedDate    DateTime @default(now())
  address       String?
  country       String?
  phone         String?
  phoneVerified Boolean? @default(false)
  avatar        String?
  dob           DateTime?
  bio           String?
  verified      Boolean? @default(false)
  location      WorkerLocation?
  services      WorkerService[]
  work          Work[]
}

model WorkerLocation {
  id        String    @id @default(uuid())
  longitude Float
  latitude  Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  workerId  String    @unique
  worker    Worker   @relation(fields: [workerId], references: [id])
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  joinedDate    DateTime @default(now())
}

// Linking Model between Service and Section
model WorkerService {
  worker      Worker  @relation(fields: [workerId], references: [id])
  workerId    String
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   String 
  
  @@id([workerId, serviceId])
}

// Services (has many - to - many relation with Section and Worker)
model Service {
  id               String              @id
  title            String              @db.VarChar(255) @unique
  description      String?
  createdAt        DateTime            @default(now())
  sections       ServiceSection[]
  workmen          WorkerService[]
  work             Work[]
}

// Section (has many - to - many relation with Section)
model Section {
  id            String      @id
  title         String      @db.VarChar(255) @unique
  description   String?
  createdAt     DateTime    @default(now())
  services      ServiceSection[]
}

// Linking Model between Service and Section
model ServiceSection {
  section     Section @relation(fields: [sectionId], references: [id])
  sectionId   String
  service      Service  @relation(fields: [serviceId], references: [id])
  serviceId    String 
  
  @@id([sectionId, serviceId])
}

model Work {
  id            String            @id
  createdAt     DateTime          @default(now())
  client        Client            @relation(fields: [clientId], references: [id])
  clientId      String 
  worker        Worker           @relation(fields: [workerId], references: [id])
  workerId      String
  service       Service           @relation(fields: [serviceId], references: [id])
  serviceId     String
  location      WorkLocation?
  requestTime   DateTime          @default(now())
  workStartTime DateTime?
  workEndTime   DateTime?
  paymentId     String?
}

model WorkLocation {
  id        String    @id @default(uuid())
  longitude Float
  latitude  Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  workId    String    @unique
  work      Work      @relation(fields: [workId], references: [id])
}
